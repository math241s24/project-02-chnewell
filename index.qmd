---
title: ""
subtitle: "Project 2"
author: ""
format: html
editor: visual
execute:
  echo: false
  warning: false
  message: false

---
```{r, echo: false}
library(tidyverse)
library(dplyr)
library(rvest)
library(httr)
library(readr)
library(RColorBrewer)
library(tidyr)
library(shiny)
library(DT)
library(tidytext)
library(knitr)
library(janeaustenr) 
library(RCurl)
library(htm2txt)
library(stringr)
```

## Abstract

I want to make a visualization of quantity and correlation through an interactive search method for the MTG rulings.

## Introduction
Magic the Gathering is a children's card game. You play cards according to costs in order to win. In order to conserve text space, rules on cards are shortened to keywords. All of these keywords are defined in the official rules book.

![Storm Crow](img/mtg_example_highlight)

However, there's a problem. Magic the Gathering has been running since 1994, and at this point the MTG rulebook is about 250 pages. Understanding the rules completely is very difficult even for experienced players.

The goal of this project is to make a tool that will display trends and patterns in the rules, to better understand what mechanics in the rules are correlated.

## Topic of Research

The goal of my project is to make an application visualizing quantity and correlation through an interactive search method for the MTG rulings. Once a keyword is chosen, the application will give:

1.  A list of sections in the rules that the keyword resides.

2.  A graph of some number of keywords close in proximity to the searched keyword.

## The Data

The data consists of the scraped text from the official online rules.

Data wrangling has included removing all the conjunctions that occur. An observation in the dataset consists of a word, the number of times it occurs in the dataset, and its placement in the document.

Because of the nature of the application, ordering the data by number of occurrences would make it impossible to find the original placement of keywords in the original rules.

```{r}
url <- 'https://media.wizards.com/2024/downloads/MagicCompRules%2020240308.txt'
mtgtext <- gettxt(url)
mtgtext <- str_split(mtgtext[1], "\\s+") %>% pluck(1)

mtg_df <- as.data.frame(mtgtext)
names(mtg_df) <- "word"

data("stop_words")

mtg_df <- mtg_df %>%
  anti_join(stop_words) %>%
  group_by(word) %>%
  mutate(word_count = n())

glimpse(mtg_df)
```

## Approach and Visualization

Let's say that the keyword 'pool' was searched, with an area of search of 40. The app will then return the top 5 places in the rules that describe this keyword, and then will create a graphic of the top 15 words that are of at most 40 word distance from any mention of the keyword.

```{r, echo=FALSE}

word_to_test <- "pool"
area_of_search <- 40

indices <- which(mtg_df == word_to_test)

array_of_words <- character(length(indices)*2*area_of_search)

for (x in 1:length(indices)) {
  for (j in -area_of_search:area_of_search){
    array_of_words[(j+area_of_search)*x] <- mtg_df$word[indices[x] + j]
  }
}

df_of_words <- data.frame(words = array_of_words) %>%
  filter(words != "")

for (x in 1:length(indices)) {
  i = indices[x]
  place_in_rules = 0
  
  while(i > 5){
    if(grepl("\\b\\d+(\\.\\d+[a-z]?)?[,.]?\\b", mtg_df$word[i])){
      place_in_rules = i
      i = 4
    }
    i = i - 1
  }
  print(paste("See rule", mtg_df$word[place_in_rules]))
  if(x > 5){
    break
  }
}


df_of_words %>%
  count(words, sort = TRUE) %>%
  slice_head(n = 15) %>%
  ggplot(aes(y = fct_reorder(words, n), x = n, fill = n)) +
  geom_col() +
  guides(fill = FALSE) + labs(y = "Most Common Words", x = "Count", title = word_to_test)


```

From this graphic for pool, we can see that the most common term close to it is 'mana'. This makes sense, because in the game, 'mana pool' is a common phrase.


Another example would be the keyword poison, with an area of search of 20. The phrase most used with this would be 'poison counter', so 'counter' should be the top term on this graphic.

```{r, echo=FALSE}

word_to_test <- "poison"
area_of_search <- 20

indices <- which(mtg_df == word_to_test)

array_of_words <- character(length(indices)*2*area_of_search)

for (x in 1:length(indices)) {
  for (j in -area_of_search:area_of_search){
    array_of_words[(j+area_of_search)*x] <- mtg_df$word[indices[x] + j]
  }
}

df_of_words <- data.frame(words = array_of_words) %>%
  filter(words != "")

for (x in 1:length(indices)) {
  i = indices[x]
  place_in_rules = 0
  
  while(i > 5){
    if(grepl("\\b\\d+(\\.\\d+[a-z]?)?[,.]?\\b", mtg_df$word[i])){
      place_in_rules = i
      i = 4
    }
    i = i - 1
  }
  print(paste("See rule", mtg_df$word[place_in_rules]))
  if(x > 5){
    break
  }
}


df_of_words %>%
  count(words, sort = TRUE) %>%
  slice_head(n = 15) %>%
  ggplot(aes(y = fct_reorder(words, n), x = n, fill = n)) +
  geom_col() +
  guides(fill = FALSE) + labs(y = "Most Common Words", x = "Count", title = word_to_test)

```

Interestingly enough, it appears that 'player' is the most common term. This example underlines the importance of the area of search. While 'poison counter' might be the most common term, the rules might reference the player many times for every mention of 'poison', and since the area of search we chose was 20, it will return that as higher.

Changing the area of search to 1 gives this graphic.

```{r, echo=FALSE}

word_to_test <- "poison"
area_of_search <- 1

indices <- which(mtg_df == word_to_test)

array_of_words <- character(length(indices)*2*area_of_search)

for (x in 1:length(indices)) {
  for (j in -area_of_search:area_of_search){
    array_of_words[(j+area_of_search)*x] <- mtg_df$word[indices[x] + j]
  }
}

df_of_words <- data.frame(words = array_of_words) %>%
  filter(words != "")


df_of_words %>%
  count(words, sort = TRUE) %>%
  slice_head(n = 15) %>%
  ggplot(aes(y = fct_reorder(words, n), x = n, fill = n)) +
  geom_col() +
  guides(fill = FALSE) + labs(y = "Most Common Words", x = "Count", title = word_to_test)

```

The player is referenced more than counters when talking about poison, but the 'counter' keyword is referenced closer to 'poison' than 'player' is.


## Analysis

The keywords referenced more than 260 times in the rules are as follows are here:

```{r}
filtered_mtg_df <- mtg_df[!duplicated(mtg_df$word), ]
filtered_mtg_df <- filtered_mtg_df %>%
  filter(word_count > 260) %>%
  arrange(desc(word_count))

ggplot(filtered_mtg_df, aes(y = reorder(word, word_count), x = word_count)) +
  geom_col() +
  guides(fill = FALSE) + labs(y = "Most Common Words", x = "Count", title = "Top Keywords")
```

The top 5 main ones are 'player', 'rule', 'ability', 'card', and 'creature'. It looks like the graph follows an asymptotic decay curve, which is very cool and what would be expected.

```{r, echo=FALSE, eval=FALSE}

word_to_test <- "player"
area_of_search <- 4

indices <- which(mtg_df == word_to_test)

array_of_words <- character(length(indices)*2*area_of_search)

for (x in 1:length(indices)) {
  for (j in -area_of_search:area_of_search){
    array_of_words[(j+area_of_search)*x] <- mtg_df$word[indices[x] + j]
  }
}

filtered_mtg_df <- mtg_df[!duplicated(mtg_df$word), ]
length_of_array = length(array_of_words)

df_of_words <- data.frame(words = array_of_words) %>%
  filter(words != "") %>%
  group_by(words) %>%
  mutate(ratio_count = n())
  
  

for(x in 1:length_of_array){
  placement = which(filtered_mtg_df$word == df_of_words$words[x])
  ratio = (df_of_words$ratio_count[x])/sum(filtered_mtg_df$word_count[placement])
  df_of_words$ratio_count[x] = ratio
}


df_of_words %>%
  count(words, sort = TRUE) %>%
  slice_head(n = 15) %>%
  ggplot(aes(y = fct_reorder(words, n), x = n, fill = n)) +
  geom_col() +
  guides(fill = FALSE) + labs(y = "Most Common Words", x = "Count", title = word_to_test)

```

## Discussion

Some keywords go hand in hand with other keywords, and the graphics prove that. Interestingly enough, however, some more common keywords like 'player' and 'ability' are not as homogeneous in their placement in the rules as one would think. Some keywords have many more of a certain 'common' keyword than others.



Unfortunately, I was unable to get the application working. The code works, and the application window opens, but they don't mesh together. This would be a necessary next step should I continue this into the future.
