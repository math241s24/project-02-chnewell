dat_names <- reactive({
indices <- which(mtg_df$word == input$names)
array_of_words <- character(length(indices)*2*input$search_range)
for (x in 1:length(indices)) {
for (j in -input$search_range:input$search_range){
if (indices[x] + j > 0 && indices[x] + j <= nrow(mtg_df)) {
array_of_words[((j+input$search_range)*length(indices)) + x] <- mtg_df$word[indices[x] + j]
}
}
}
df_of_words <- data.frame(words = array_of_words) %>%
filter(words != "")
})
output$graph <- renderPlot({
dat_names() %>%
count(words, sort = TRUE) %>%
slice_head(n = 15) %>%
ggplot(aes(y = fct_reorder(words, n), x = n, fill = n)) +
geom_col() +
guides(fill = FALSE) +
labs(y = "Most Common Words", x = "Count", title = input$names)
})
dat_names_agg <- reactive({
dat_names() %>%
group_by(words) %>%
summarize(count = n()) %>%
arrange(desc(count))
})
output$table <- renderDataTable({
datatable(dat_names_agg(),
options = list(paging = FALSE,
searching = FALSE,
orderClasses = TRUE))
})
}
library(shiny)
library(tidyverse)
library(DT)
library(tidytext)
library(knitr)
library(janeaustenr)
library(dplyr)
library(RCurl)
library(htm2txt)
library(stringr)
url <- 'https://media.wizards.com/2024/downloads/MagicCompRules%2020240308.txt'
mtgtext <- gettxt(url)
mtgtext <- str_split(mtgtext[1], "\\s+") %>% pluck(1)
mtg_df <- as.data.frame(mtgtext)
names(mtg_df) <- "word"
data("stop_words")
mtg_df <- mtg_df %>%
anti_join(stop_words) %>%
group_by(word) %>%
mutate(word_count = n())
ui <- fluidPage(
titlePanel("What Words Are Closest To A Keyword?"),
sidebarLayout(
sidebarPanel(
# Create a text input widget
selectizeInput(inputId = "names",
label = "Keyword to search",
choices = NULL,
multiple = TRUE),
p("Only put one keyword."),
radioButtons(inputId = "variable",
label = "Variable of Interest"),
sliderInput("search_range", "Range of Search around Keyword:",
min = 1, max = max(mtg_df$word_count),
value = 500),
submitButton("Update Results!")
),
mainPanel(
plotOutput(outputId = "graph"),
dataTableOutput(outputId = "table")
)
)
)
library(shiny)
library(tidyverse)
library(DT)
library(tidytext)
library(knitr)
library(janeaustenr)
library(dplyr)
library(RCurl)
library(htm2txt)
library(stringr)
url <- 'https://media.wizards.com/2024/downloads/MagicCompRules%2020240308.txt'
mtgtext <- gettxt(url)
mtgtext <- str_split(mtgtext[1], "\\s+") %>% pluck(1)
mtg_df <- as.data.frame(mtgtext)
names(mtg_df) <- "word"
data("stop_words")
mtg_df <- mtg_df %>%
anti_join(stop_words) %>%
group_by(word) %>%
mutate(word_count = n())
ui <- fluidPage(
titlePanel("What Words Are Closest To A Keyword?"),
sidebarLayout(
sidebarPanel(
# Create a text input widget
selectizeInput(inputId = "names",
label = "Keyword to search",
multiple = TRUE),
p("Only put one keyword."),
radioButtons(inputId = "variable",
label = "Variable of Interest"),
sliderInput("search_range", "Range of Search around Keyword:",
min = 1, max = max(mtg_df$word_count),
value = 500),
submitButton("Update Results!")
),
mainPanel(
plotOutput(outputId = "graph"),
dataTableOutput(outputId = "table")
)
)
)
library(shiny)
library(tidyverse)
library(DT)
library(tidytext)
library(knitr)
library(janeaustenr)
library(dplyr)
library(RCurl)
library(htm2txt)
library(stringr)
url <- 'https://media.wizards.com/2024/downloads/MagicCompRules%2020240308.txt'
mtgtext <- gettxt(url)
mtgtext <- str_split(mtgtext[1], "\\s+") %>% pluck(1)
mtg_df <- as.data.frame(mtgtext)
names(mtg_df) <- "word"
data("stop_words")
mtg_df <- mtg_df %>%
anti_join(stop_words) %>%
group_by(word) %>%
mutate(word_count = n())
ui <- fluidPage(
titlePanel("What Words Are Closest To A Keyword?"),
sidebarLayout(
sidebarPanel(
# Create a text input widget
selectizeInput(inputId = "names",
label = "Keyword to search",
choices = NULL,
multiple = TRUE),
p("Only put one keyword."),
radioButtons(inputId = "variable",
label = "Variable of Interest"),
sliderInput("search_range", "Range of Search around Keyword:",
min = 1, max = max(mtg_df$word_count),
value = 500),
submitButton("Update Results!")
),
mainPanel(
plotOutput(outputId = "graph"),
dataTableOutput(outputId = "table")
)
)
)
library(shiny)
library(tidyverse)
library(DT)
library(tidytext)
library(knitr)
library(janeaustenr)
library(dplyr)
library(RCurl)
library(htm2txt)
library(stringr)
url <- 'https://media.wizards.com/2024/downloads/MagicCompRules%2020240308.txt'
mtgtext <- gettxt(url)
mtgtext <- str_split(mtgtext[1], "\\s+") %>% pluck(1)
mtg_df <- as.data.frame(mtgtext)
names(mtg_df) <- "word"
data("stop_words")
mtg_df <- mtg_df %>%
anti_join(stop_words) %>%
group_by(word) %>%
mutate(word_count = n())
ui <- fluidPage(
titlePanel("What Words Are Closest To A Keyword?"),
sidebarLayout(
sidebarPanel(
# Create a text input widget
selectizeInput(inputId = "names",
label = "Keyword to search",
choices = NULL,
multiple = TRUE),
p("Only put one keyword."),
radioButtons(inputId = "variable",
label = "Variable of Interest",
choices = c("n", "prop"),
selected = "prop"),
sliderInput("search_range", "Range of Search around Keyword:",
min = 1, max = max(mtg_df$word_count),
value = 500),
submitButton("Update Results!")
),
mainPanel(
plotOutput(outputId = "graph"),
dataTableOutput(outputId = "table")
)
)
)
server <- function(input, output, session){
updateSelectizeInput(session, 'names',
choices = unique(mtg_df$word),
server = TRUE)
dat_names <- reactive({
indices <- which(mtg_df$word == input$names)
array_of_words <- character(length(indices)*2*input$search_range)
for (x in 1:length(indices)) {
for (j in -input$search_range:input$search_range){
if (indices[x] + j > 0 && indices[x] + j <= nrow(mtg_df)) {
array_of_words[((j+input$search_range)*length(indices)) + x] <- mtg_df$word[indices[x] + j]
}
}
}
df_of_words <- data.frame(words = array_of_words) %>%
filter(words != "")
})
output$graph <- renderPlot({
dat_names() %>%
count(words, sort = TRUE) %>%
slice_head(n = 15) %>%
ggplot(aes(y = fct_reorder(words, n), x = n, fill = n)) +
geom_col() +
guides(fill = FALSE) +
labs(y = "Most Common Words", x = "Count", title = input$names)
})
dat_names_agg <- reactive({
dat_names() %>%
group_by(words) %>%
summarize(count = n()) %>%
arrange(desc(count))
})
output$table <- renderDataTable({
datatable(dat_names_agg(),
options = list(paging = FALSE,
searching = FALSE,
orderClasses = TRUE))
})
}
runApp('app_scratchwork.R')
runApp('app_scratchwork.R')
runApp('app_scratchwork.R')
runApp('app_scratchwork.R')
runApp('testing_app.R')
runApp('testing_app.R')
runApp('testing_app.R')
runApp('testing_app.R')
runApp('testing_app.R')
runApp('testing_app.R')
runApp('testing_app.R')
runApp('testing_app.R')
runApp('testing_app.R')
runApp('testing_app.R')
runApp('testing_app.R')
runApp('testing_app.R')
runApp('testing_app.R')
runApp('testing_app.R')
runApp('scratchwork.R')
runApp('scratchwork.R')
runApp('scratchwork.R')
runApp('scratchwork.R')
runApp('scratchwork.R')
runApp()
library(tidyverse)
library(dplyr)
library(rvest)
library(httr)
library(readr)
library(RColorBrewer)
library(tidyr)
library(tidyverse)
library(dplyr)
library(rvest)
library(httr)
library(readr)
library(RColorBrewer)
library(tidyr)
library(shiny)
library(DT)
library(tidytext)
library(knitr)
library(janeaustenr)
library(RCurl)
library(htm2txt)
library(stringr)
word_to_test <- "pool"
area_of_search <- 40
indices <- which(mtg_df == word_to_test)
array_of_words <- character(length(indices)*2*area_of_search)
for (x in 1:length(indices)) {
print(indices[x])
for (j in -area_of_search:area_of_search){
array_of_words[(j+area_of_search)*x] <- mtg_df$word[indices[x] + j]
}
}
df_of_words <- data.frame(words = array_of_words) %>%
filter(words != "")
df_of_words %>%
count(words, sort = TRUE) %>%
slice_head(n = 15) %>%
ggplot(aes(y = fct_reorder(words, n), x = n, fill = n)) +
geom_col() +
guides(fill = FALSE) + labs(y = "Most Common Words", x = "Count", title = word_to_test)
word_to_test <- "pool"
area_of_search <- 40
indices <- which(mtg_df == word_to_test)
array_of_words <- character(length(indices)*2*area_of_search)
for (x in 1:length(indices)) {
for (j in -area_of_search:area_of_search){
array_of_words[(j+area_of_search)*x] <- mtg_df$word[indices[x] + j]
}
}
df_of_words <- data.frame(words = array_of_words) %>%
filter(words != "")
df_of_words %>%
count(words, sort = TRUE) %>%
slice_head(n = 15) %>%
ggplot(aes(y = fct_reorder(words, n), x = n, fill = n)) +
geom_col() +
guides(fill = FALSE) + labs(y = "Most Common Words", x = "Count", title = word_to_test)
word_to_test <- "cumulative"
area_of_search <- 40
indices <- which(mtg_df == word_to_test)
array_of_words <- character(length(indices)*2*area_of_search)
for (x in 1:length(indices)) {
for (j in -area_of_search:area_of_search){
array_of_words[(j+area_of_search)*x] <- mtg_df$word[indices[x] + j]
}
}
df_of_words <- data.frame(words = array_of_words) %>%
filter(words != "")
df_of_words %>%
count(words, sort = TRUE) %>%
slice_head(n = 15) %>%
ggplot(aes(y = fct_reorder(words, n), x = n, fill = n)) +
geom_col() +
guides(fill = FALSE) + labs(y = "Most Common Words", x = "Count", title = word_to_test)
word_to_test <- "poison"
area_of_search <- 20
indices <- which(mtg_df == word_to_test)
array_of_words <- character(length(indices)*2*area_of_search)
for (x in 1:length(indices)) {
for (j in -area_of_search:area_of_search){
array_of_words[(j+area_of_search)*x] <- mtg_df$word[indices[x] + j]
}
}
df_of_words <- data.frame(words = array_of_words) %>%
filter(words != "")
df_of_words %>%
count(words, sort = TRUE) %>%
slice_head(n = 15) %>%
ggplot(aes(y = fct_reorder(words, n), x = n, fill = n)) +
geom_col() +
guides(fill = FALSE) + labs(y = "Most Common Words", x = "Count", title = word_to_test)
word_to_test <- "The"
area_of_search <- 40
indices <- which(mtg_df == word_to_test)
array_of_words <- character(length(indices)*2*area_of_search)
for (x in 1:length(indices)) {
for (j in -area_of_search:area_of_search){
array_of_words[(j+area_of_search)*x] <- mtg_df$word[indices[x] + j]
}
}
View(mtg_df)
View(df_of_words)
word_to_test <- "pool"
area_of_search <- 40
indices <- which(mtg_df == word_to_test)
array_of_words <- character(length(indices)*2*area_of_search)
for (x in 1:length(indices)) {
for (j in -area_of_search:area_of_search){
array_of_words[(j+area_of_search)*x] <- mtg_df$word[indices[x] + j]
}
}
df_of_words <- data.frame(words = array_of_words) %>%
filter(words != "")
df_of_words %>%
count(words, sort = TRUE) %>%
slice_head(n = 15) %>%
ggplot(aes(y = fct_reorder(words, n), x = n, fill = n)) +
geom_col() +
guides(fill = FALSE) + labs(y = "Most Common Words", x = "Count", title = word_to_test)
i = indices[0]
place_in_rules = 0
while(i > 5){
if(grepl("\\b\\d+(\\.\\d+[a-z]?)?[,.]?\\b", mtg_df$word[i])){
place_in_rules = i
i = 4
}
i = i - 1
}
print(i)
print(indices[0])
word_to_test <- "pool"
area_of_search <- 40
indices <- which(mtg_df == word_to_test)
array_of_words <- character(length(indices)*2*area_of_search)
for (x in 1:length(indices)) {
for (j in -area_of_search:area_of_search){
array_of_words[(j+area_of_search)*x] <- mtg_df$word[indices[x] + j]
}
}
df_of_words <- data.frame(words = array_of_words) %>%
filter(words != "")
df_of_words %>%
count(words, sort = TRUE) %>%
slice_head(n = 15) %>%
ggplot(aes(y = fct_reorder(words, n), x = n, fill = n)) +
geom_col() +
guides(fill = FALSE) + labs(y = "Most Common Words", x = "Count", title = word_to_test)
i = indices[0]
place_in_rules = 0
print(indices[0])
print(i)
while(i > 5){
if(grepl("\\b\\d+(\\.\\d+[a-z]?)?[,.]?\\b", mtg_df$word[i])){
place_in_rules = i
i = 4
}
i = i - 1
}
word_to_test <- "pool"
area_of_search <- 40
indices <- which(mtg_df == word_to_test)
array_of_words <- character(length(indices)*2*area_of_search)
for (x in 1:length(indices)) {
for (j in -area_of_search:area_of_search){
array_of_words[(j+area_of_search)*x] <- mtg_df$word[indices[x] + j]
}
}
df_of_words <- data.frame(words = array_of_words) %>%
filter(words != "")
df_of_words %>%
count(words, sort = TRUE) %>%
slice_head(n = 15) %>%
ggplot(aes(y = fct_reorder(words, n), x = n, fill = n)) +
geom_col() +
guides(fill = FALSE) + labs(y = "Most Common Words", x = "Count", title = word_to_test)
i = indices[0]
place_in_rules = 0
print("holy fuck")
print(indices[0])
print(i)
while(i > 5){
if(grepl("\\b\\d+(\\.\\d+[a-z]?)?[,.]?\\b", mtg_df$word[i])){
place_in_rules = i
i = 4
}
i = i - 1
}
word_to_test <- "pool"
area_of_search <- 40
indices <- which(mtg_df == word_to_test)
array_of_words <- character(length(indices)*2*area_of_search)
for (x in 1:length(indices)) {
for (j in -area_of_search:area_of_search){
array_of_words[(j+area_of_search)*x] <- mtg_df$word[indices[x] + j]
}
}
df_of_words <- data.frame(words = array_of_words) %>%
filter(words != "")
df_of_words %>%
count(words, sort = TRUE) %>%
slice_head(n = 15) %>%
ggplot(aes(y = fct_reorder(words, n), x = n, fill = n)) +
geom_col() +
guides(fill = FALSE) + labs(y = "Most Common Words", x = "Count", title = word_to_test)
i = indices[1]
place_in_rules = 0
while(i > 5){
if(grepl("\\b\\d+(\\.\\d+[a-z]?)?[,.]?\\b", mtg_df$word[i])){
place_in_rules = i
i = 4
}
i = i - 1
}
print("See rule " + mtg_df$word[place_in_rules])
word_to_test <- "pool"
area_of_search <- 40
indices <- which(mtg_df == word_to_test)
array_of_words <- character(length(indices)*2*area_of_search)
for (x in 1:length(indices)) {
for (j in -area_of_search:area_of_search){
array_of_words[(j+area_of_search)*x] <- mtg_df$word[indices[x] + j]
}
}
df_of_words <- data.frame(words = array_of_words) %>%
filter(words != "")
df_of_words %>%
count(words, sort = TRUE) %>%
slice_head(n = 15) %>%
ggplot(aes(y = fct_reorder(words, n), x = n, fill = n)) +
geom_col() +
guides(fill = FALSE) + labs(y = "Most Common Words", x = "Count", title = word_to_test)
i = indices[1]
place_in_rules = 0
while(i > 5){
if(grepl("\\b\\d+(\\.\\d+[a-z]?)?[,.]?\\b", mtg_df$word[i])){
place_in_rules = i
i = 4
}
i = i - 1
}
print(paste("See rule", mtg_df$word[place_in_rules]))
